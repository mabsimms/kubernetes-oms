kind: ConfigMap
apiVersion: v1
data:
  containers.input.conf: |-
    # Json Log Example:
    # {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
    # CRI Log Example:
    # 2016-02-17T00:04:05.931087621Z stdout F [info:2016-02-16T16:04:05.930-08:00] Some log text here
    <source>
      @type tail
      path /var/log/containers/*.log
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag containerlog
      read_from_head true
      format multi_format
      @id in-tail-containers-storage
      <storage in-tail-containers-storage>
        @type local
        persistent true
      </storage>
      <parse>
        @type json
        time_key time
        time_type string
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
      # <pattern>
      #   @type regexp
      #   expression /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
      #   time_key time
      #   time_type string
      #   time_format %Y-%m-%dT%H:%M:%S.%N%:z
      # </pattern>
    </source>
  system.input.conf: |-
    # Example:
    # 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081
    # <source>
    #   @type tail
    #   format /^(?<time>[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?<severity>[^ \]]*) *\] (?<message>.*)$/
    #   time_format %Y-%m-%d %H:%M:%S
    #   path /var/log/salt/minion
    #   @id in-tail-salt-storage
    #   <storage in-tail-salt-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag salt
    # </source>

    # Example:
    # Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script
    # <source>
    #   @type tail
    #   format syslog
    #   path /var/log/startupscript.log
    #   @id in-tail-startup-storage
    #   <storage in-tail-startup-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag startupscript
    # </source>

    # Examples:
    # time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
    # time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
    # <source>
    #   @type tail
    #   format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
    #   path /var/log/docker.log
    #   @id in-tail-dockerlog-storage
    #   <storage in-tail-dockerlog-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag docker
    # </source>

    # Example:
    # 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
    # <source>
    #   @type tail
    #   # Not parsing this, because it doesn't have anything particularly useful to
    #   # parse out of it (like severities).
    #   format none
    #   path /var/log/etcd.log
    #   @id in-tail-etcd-storage
    #   <storage in-tail-etcd-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag etcd
    # </source>

    # Multi-line parsing is required for all the kube logs because very large log
    # statements, such as those that include entire object bodies, get split into
    # multiple lines by glog.

    # Example:
    # # I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/kubelet.log
    #   @id in-tail-kubelet-storage
    #   <storage in-tail-kubelet-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag kubelet
    # </source>

    # Example:
    # I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/kube-proxy.log
    #   @id in-tail-kubeproxy-storage
    #   <storage in-tail-kubeproxy-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag kube-proxy
    # </source>

    # Example:
    # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/kube-apiserver.log
    #   @id in-tail-apiserver-storage
    #   <storage in-tail-apiserver-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag kube-apiserver
    # </source>

    # Example:
    # I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/kube-controller-manager.log
    #   @id in-tail-kubecontroller-storage
    #   <storage in-tail-kubecontroller-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag kube-controller-manager
    # </source>

    # Example:
    # W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/kube-scheduler.log
    #   @id in-tail-kubescheduler-storage
    #   <storage in-tail-kubescheduler-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag kube-scheduler
    # </source>

    # Example:
    # I1104 10:36:20.242766       5 rescheduler.go:73] Running Rescheduler
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/rescheduler.log
    #   @id in-tail-rescheduler-storage
    #   <storage in-tail-rescheduler-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag rescheduler
    # </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/glbc.log
    #   @id in-tail-glbc-storage
    #   <storage in-tail-glbc-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag glbc
    # </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    # <source>
    #   @type tail
    #   format multiline
    #   multiline_flush_interval 5s
    #   format_firstline /^\w\d{4}/
    #   format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
    #   time_format %m%d %H:%M:%S.%N
    #   path /var/log/cluster-autoscaler.log
    #   @id in-tail-cluster-scaler-storage
    #   <storage in-tail-cluster-scaler-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   tag cluster-autoscaler
    # </source>

    # Logs from systemd-journal for interesting services.
    # <source>
    #   @type systemd
    #   filters [{ "_SYSTEMD_UNIT": "docker.service" }]
    #   @id in-systemd-docker-service-storage
    #   <storage in-systemd-docker-service-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   read_from_head true
    #   tag docker
    # </source>

    # <source>
    #   @type systemd
    #   filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
    #   @id in-systemd-kubelet-service-storage
    #   <storage in-systemd-kubelet-service-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   read_from_head true
    #   tag kubelet
    # </source>

    # <source>
    #   @type systemd
    #   filters [{ "_SYSTEMD_UNIT": "node-problem-detector.service" }]
    #   @id in-systemd-node-problem-service-storage
    #   <storage in-systemd-node-problem-service-storage>
    #     @type local
    #     persistent true
    #   </storage>
    #   read_from_head true
    #   tag node-problem-detector
    # </source>
  forward.input.conf: |-
    # Takes the messages sent over TCP
    <source>
      @type forward
    </source>
  monitoring.conf: |-
    # Prometheus Exporter Plugin
    # input plugin that exports metrics
    <source>
      @type prometheus
    </source>

    <source>
      @type monitor_agent
    </source>

    # input plugin that collects metrics from MonitorAgent
    <source>
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for output plugin
    <source>
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for in_tail plugin
    <source>
      @type prometheus_tail_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>
  output.conf: |-
    # Enriches records with Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>

    <match **>
       @type azureoms
       workspace "#{ENV['OMS_WORKSPACE']}"
       key "#{ENV['OMS_KEY']}"
   
       # Configuration per https://docs.fluentd.org/v1.0/articles/buffer-section
       <buffer tag, time>
           timekey        30s
           timekey_wait   5s
       </buffer>
    </match>
metadata:
  name: fluentd-es-config-v0.1.1
  namespace: monitoring
  labels:
    addonmanager.kubernetes.io/mode: Reconcile